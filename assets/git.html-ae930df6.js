import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as l,c as r,a as e,b as a,d as c,f as i}from"./app-86c120a1.js";const s="/computer-learning-notes/assets/git_centralized-909db6d0.png",o="/computer-learning-notes/assets/git_distributed-5986b697.png",g="/computer-learning-notes/assets/git-working_staging-73a430e8.jpg",u={},h=i('<h2 id="git-简介" tabindex="-1"><a class="header-anchor" href="#git-简介" aria-hidden="true">#</a> Git 简介</h2><h3 id="git-是什么" tabindex="-1"><a class="header-anchor" href="#git-是什么" aria-hidden="true">#</a> Git 是什么？</h3><ul><li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>Git 与常用的版本控制工具 CVS, Subversion 等不同，Git 是分布式版本控制系统，不必服务器端软件支持。</li></ul><h3 id="集中式-vs-分布式" tabindex="-1"><a class="header-anchor" href="#集中式-vs-分布式" aria-hidden="true">#</a> 集中式 vs 分布式</h3><h4 id="集中式" tabindex="-1"><a class="header-anchor" href="#集中式" aria-hidden="true">#</a> 集中式</h4><ul><li>在集中式版本控制系统中，代码库存储在中央服务器上，开发人员需要从该服务器中获取最新的代码，并在本地进行修改。开发人员提交的更改需要上传到服务器才能与其他人共享。这种情况下，如果服务器出现故障或网络中断，开发人员将无法执行版本控制操作。</li><li>集中式版本控制系统的主要缺点在于其依赖于网络连接才能正常工作。尤其是在互联网环境下，当遇到网络速度较慢的情况时，开发人员提交较大文件的操作可能会变得异常缓慢。举例来说，即使是一个大小为10M的文件，在面临网络速度缓慢的情况下，提交所需的时间可能长达5分钟，这种情况可能会给开发人员带来不便和压力。</li><li>在集中式版本控制系统中，分支和合并操作较为复杂，需要通过服务器进行协调。</li></ul><div class="customer-container-center"><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h4 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h4><ul><li>分布式版本控制系统会将完整的代码仓库克隆到每个开发人员的本地机器上。每个开发人员都拥有完整的历史记录和版本库，可以在本地进行修改和提交，而无需依赖中央服务器。</li><li>开发人员可以在没有网络连接的情况下继续工作，并且可以在完成开发后将更改推送到远程存储库进行共享。这种分布式的特性使得团队成员可以并行工作，而不会互相干扰。</li><li>分支和合并更加简单和快速，因为每个开发人员都有自己的本地分支，可以自由地进行合并操作。</li></ul><div class="customer-container-center"><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h2 id="git-的安装及配置" tabindex="-1"><a class="header-anchor" href="#git-的安装及配置" aria-hidden="true">#</a> Git 的安装及配置</h2><h3 id="git-的安装" tabindex="-1"><a class="header-anchor" href="#git-的安装" aria-hidden="true">#</a> Git 的安装</h3><h4 id="linux-以-centos-为例" tabindex="-1"><a class="header-anchor" href="#linux-以-centos-为例" aria-hidden="true">#</a> Linux(以 CentOS 为例)</h4><ol><li>安装所需软件包</li></ol><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
yum install gcc perl-ExtUtils-MakeMaker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>下载 &amp; 安装</li></ol><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code># 进入安装目录
cd /安装目录

# 执行下载命令
wget https://www.kernel.org/pub/software/scm/git/git-2.15.1.tar.gz

# 解压
tar -zxzf git-2.15.1.tar.gz -C /安装目录

# 进入解压目录
cd /安装目录/git-2.15.1

# 编译 /usr/local/git为编译安装目录
make prefix=/usr/local/git all 

# 安装
make prefix=/usr/local/git install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="macos" tabindex="-1"><a class="header-anchor" href="#macos" aria-hidden="true">#</a> macOS</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>macOS 系统下，推荐使用 HomeBrew 进行安装</p></div><ol><li>通过 brew 查看可安装的 Git 程序包</li></ol><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>brew search git
</code></pre></div><ol start="2"><li>安装 Git</li></ol><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>brew install git
</code></pre></div><h4 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> Windows</h4>`,24),m={href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"},p=e("li",null,"运行下载好的exe文件",-1),v=e("li",null,"选择安装位置",-1),b=e("li",null,"使用默认配置完成安装",-1),x=i(`<h3 id="git-的配置" tabindex="-1"><a class="header-anchor" href="#git-的配置" aria-hidden="true">#</a> Git 的配置</h3><h4 id="设置用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#设置用户名和邮箱" aria-hidden="true">#</a> 设置用户名和邮箱</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于 Git 是分布式版本控制系统，远程仓库需要根据用户名和邮箱跟踪提交者的身份。通过设置用户名和密码可以在提交代码时方便地查看代码贡献者的身份，这有助于提高代码质量和代码管理的可读性。在开源项目中，通过提交者的用户名，我们可以更好地跟踪和管理代码库。</p></div><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>git config --global user.name &quot;用户名&quot;
git config --global user.email &quot;电子邮箱地址&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以在项目中的 .git 文件中找到 config 文件修改用户名和邮箱。注意，此时设置用户名和邮箱只在该项目中生效，不是全局生效。</p><h4 id="配置密钥" tabindex="-1"><a class="header-anchor" href="#配置密钥" aria-hidden="true">#</a> 配置密钥</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当使用 Git 时，配置密钥是为了确保你的身份可以被验证和授权，以便进行安全的代码交互和版本控制。想象一下，你想在 GitHub 上上传你的代码并与团队成员协作，但在每次操作时都需要输入用户名和密码。这种方式既繁琐又不安全，因为密码可能会被截获或泄漏。</p></div><ol><li>生成密钥</li></ol><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>ssh-keygen -t rsa -C &quot; 电子邮箱地址&quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加公钥到托管服务(以 GitHub 为例)</li></ol><ul><li>复制生成的密钥</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在不同的操作系统上，生成的公钥位置会有所不同。</p><ul><li>Linux: 生成的公钥一般位于 ~/.ssh/id_rsa.pub</li><li>macOS: 生成的公钥一般位于 /Users/YourUsername/.ssh/id_rsa.pub</li><li>Windows: 生成的公钥一般位于 C:\\Users\\YourUsername.ssh\\id_rsa.pub</li></ul></div><ul><li>登录 GitHub 账户后，点击右上角的头像，选择&quot;Settings&quot;</li><li>在左侧菜单中，选择 &quot;SSH and GPG keys&quot;</li><li>点击 &quot;New SSH key&quot;</li><li>在 &quot;Title&quot; 字段中，为你的密钥起一个描述性的名称</li><li>在 &quot;Key&quot; 字段中，粘贴你之前复制的公钥内容</li><li>点击 &quot;Add SSH key&quot; 按钮</li></ul><div class="hint-container tip"><p class="hint-container-title">Windows中配置多个SSH key</p><ol><li>在 <code>.ssh</code> 目录下生成多个SSH key</li></ol><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>ssh-keygen -t rsa -b 4096 -C &quot;youremail@example.com&quot; -f ./github
ssh-keygen -t rsa -b 4096 -C &quot;youremail@example.com&quot; -f ./gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建 <code>config</code> 文件<br> 在 <code>.ssh</code> 目录下创建一个名为 <code>config</code> 的文件。在这个文件中，可以配置多个SSH key。文件示例如下:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Default GitHub
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

# Second GitHub account
Host github.com-newkey
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_newkey
  
# IP + Port
Host gitee.com
  HostName 127.0.0.1
  Port 8080
  User username
  IdentityFile ~/.ssh/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在 Git 中使用特定的 SSH key。<br> 根据在 <code>config</code> 文件中设置的Host，可以在Git中使用特定的 SSH key。例如:</li></ol><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git clone git@github.com-newkey:username/repo.git
</code></pre></div></div><h2 id="git-的工作区、暂存区和版本库" tabindex="-1"><a class="header-anchor" href="#git-的工作区、暂存区和版本库" aria-hidden="true">#</a> Git 的工作区、暂存区和版本库</h2><div class="customer-container-center"><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h3 id="工作区" tabindex="-1"><a class="header-anchor" href="#工作区" aria-hidden="true">#</a> 工作区</h3><p>工作区 (Working Directory) 是指在计算机上能看到的目录，也就是项目所在的文件夹。它包括了项目中的所有文件和子目录。在工作区中，可以编辑、添加和删除文件。</p><h3 id="暂存区" tabindex="-1"><a class="header-anchor" href="#暂存区" aria-hidden="true">#</a> 暂存区</h3><p>暂存区 (Staging Area) 是一个中间区域，用于临时存储已修改但尚未提交到版本库的文件。通过使用 <code>git add</code> 命令，可以将工作区中修改的文件添加到暂存区。这样做的好处是: 可以选择性地提交一部分修改，而不是一次性提交所有修改。</p><h3 id="版本库" tabindex="-1"><a class="header-anchor" href="#版本库" aria-hidden="true">#</a> 版本库</h3><p>版本库 (Repository) 是 Git 管理的一个数据库，用于保存已提交的文件和文件夹的历史版本。当执行 <code>git commit</code> 命令时，暂存区中的文件会被永久性地保存到版本库中。版本库中包含了提交历史、分支信息以及其他元数据。</p><h2 id="git-基础操作" tabindex="-1"><a class="header-anchor" href="#git-基础操作" aria-hidden="true">#</a> Git 基础操作</h2><h3 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h3><p>要使用 Git 对本地项目进行版本控制，首先需要对项目进行初始化。这将把本地项目转换为 Git 可识别和管理的仓库。在这个仓库中，Git 能够跟踪每个文件的修改和删除，使得历史记录可追溯，或者在未来某个时刻恢复到某个版本。初始化仓库的命令如下:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git init
</code></pre></div><p>执行此命令会在当前目录下创建一个名为 .git 的隐藏文件夹，用于存储所有的 Git 数据和配置信息。这个隐藏文件夹包含了项目中的所有版本控制信息，但不需要直接操作这个目录，因为 Git 会自动处理。</p><p>如果需要从零开始创建一个新项目，也可以在一个空目录下初始化Git仓库。首先创建一个新的目录，然后在该目录中执行 <code>git init</code> 命令:</p><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>mkdir new_project
cd new_project
git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化仓库后，可以通过 <code>git status</code> 命令查看项目的状态:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git status
</code></pre></div><p>此时，可能会看到项目中的文件处于未跟踪 (Untracked) 状态，这表示这些文件还未被 Git 管理。后续将介绍如何将文件添加到 Git 版本控制中。</p><h3 id="添加文件到暂存区" tabindex="-1"><a class="header-anchor" href="#添加文件到暂存区" aria-hidden="true">#</a> 添加文件到暂存区</h3><p>Git提供 <code>git add</code> 命令用于将文件添加到暂存区。可以一次性添加一个文件，也可以添加多个文件，甚至整个目录</p><ul><li>添加一个文件:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git add filename
</code></pre></div><ul><li>添加多个文件:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git add file1 file2 file3
</code></pre></div><ul><li>添加整个目录</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git add .
</code></pre></div><h3 id="提交更改到本地仓库" tabindex="-1"><a class="header-anchor" href="#提交更改到本地仓库" aria-hidden="true">#</a> 提交更改到本地仓库</h3><p>在将文件添加到暂存区后，可以使用 <code>git commit</code> 命令将这些更改提交到本地仓库。为了便于追踪，建议在每次提交时附上一个简洁而有意义的提交信息:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git commit -m &quot;提交信息&quot;
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">Git 提交规范</p><p>格式: <code>&lt;type&gt;(scope): subject</code></p><ul><li>type (必填) : commit 的类别，只允许使用下列标识: <ul><li>feat: 新功能</li><li>fix: 修复bug</li><li>docs: 文档改变</li><li>style: 代码格式改变</li><li>refactor: 某个已有功能重构</li><li>perf: 性能优化</li><li>test: 增加测试</li><li>build: 改变了build工具 如 grunt换成了 npm</li><li>revert: 撤销上一次的 commit</li><li>chore: 构建过程或辅助工具的变动</li></ul></li><li>scope (可选): 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li><li>subject(必填): commit 的简短描述，不超过50个字符。</li></ul></div><h3 id="查看仓库状态" tabindex="-1"><a class="header-anchor" href="#查看仓库状态" aria-hidden="true">#</a> 查看仓库状态</h3><p>查看当前仓库的状态，可以使用 <code>git status</code> 命令。此命令会显示当前分支、有哪些文件被修改且未提交，以及哪些文件已添加到暂存区但尚未提交:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git status
</code></pre></div><h3 id="查看提交历史" tabindex="-1"><a class="header-anchor" href="#查看提交历史" aria-hidden="true">#</a> 查看提交历史</h3><p>要查看仓库的提交历史，可以使用 <code>git log</code> 命令。可以通过不同选项来定制输出的格式和内容。</p><ul><li>查看简洁的提交历史:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git log --online
</code></pre></div><ul><li>查看带图形化分支结构的提交历史:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git log --graph --online
</code></pre></div><h3 id="撤销更改" tabindex="-1"><a class="header-anchor" href="#撤销更改" aria-hidden="true">#</a> 撤销更改</h3><p>Git 提供了多种命令来撤销更改:</p><ul><li>撤销工作区中的更改:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git checkout --filename
</code></pre></div><ul><li>撤销暂存区中的更改:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git reset HEAD filename
</code></pre></div><ul><li>撤销上一次提交:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git revert HEAD
</code></pre></div><ul><li>回滚到指定的提交:</li></ul><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git reset commit_hash
</code></pre></div><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><p>要在 Git 中删除一个文件，可以使用 <code>git rm</code> 命令。此命令将同时从工作区和暂存区中删除文件。然后，需要执行一次提交操作以将删除更新到本地仓库。</p><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>git rm filename
git commit -m &quot;Removed filename&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-分支管理" tabindex="-1"><a class="header-anchor" href="#git-分支管理" aria-hidden="true">#</a> Git 分支管理</h2><p>在 Git 中，通过使用不同的分支，我们可以在同一代码库中并行进行多个不同的开发任务。这使得功能开发、错误修复和测试更为简单，不必担心会影响到主分支的代码。</p><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><p>要创建一个新的分支，可以使用 <code>git branch</code> 命令，后面加上想要的新分支的名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git branch new_branch_name
</code></pre></div><p>这将创建一个名为 <code>new_branch_name</code> 的新分支。值得注意的是，这个命令只会创建新的分支，但不会自动切换到新创建的分支。这个新分支是当前所在分支 (执行<code>git branch</code>命令时) 的一个副本，包含了所有的提交历史。</p><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><p>如果想切换到其他分支进行工作，可以使用 <code>git checkout</code> 命令，后面加上想要切换到的分支的名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git checkout -b new_branch
</code></pre></div><p>这个命令会将当前工作目录切换到 <code>new_branch</code> 分支。此时，如果在工作目录中创建或修改文件，这些改动都会在 <code>new_branch</code> 分支中进行。</p><p>如果想要创建新分支的同时切换到新创建的分支，可以使用 <code>-b</code> 参数:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git checkout -b new_branch
</code></pre></div><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>当在分支上完成了工作并想要将这些更改合并到主分支 (或者其他分支) ，首先需要切换到想要合并进的分支，然后使用 <code>git merge</code> 命令:</p><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>git checkout master
git merge new_branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将把 <code>new_branch</code> 的所有新更改应用到 <code>master</code> 分支。如果 <code>master</code> 分支在 <code>new_branch</code> 创建后没有新的提交，Git会进行 <code>&quot;fast-forward&quot;</code> 操作，意味着 <code>master</code> 会直接移动到 <code>new_branch</code> 的最新提交。</p><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><p>当已经将分支的更改合并到 <code>master</code> 分支，或者不再需要某个分支，可以使用 <code>git branch -d</code> 命令来删除该分支:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git branch -d new_branch
</code></pre></div><p>这将删除名为<code>new_branch</code>的分支。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意，Git 默认不允许删除尚未合并的分支。如果确认要删除尚未合并的分支，可以使用 <code>-D</code> 参数强制删除。</p></div><h3 id="解决分支冲突" tabindex="-1"><a class="header-anchor" href="#解决分支冲突" aria-hidden="true">#</a> 解决分支冲突</h3><p>在使用 Git 进行分支合并时，如果两个分支对同一文件的同一部分进行了不同的修改，Git 会产生冲突。在这种情况下，Git 无法确定应该保留哪个版本，因此需要手动解决冲突。</p><p>当合并操作因为冲突而被中断时，Git 会在冲突的地方插入一些特殊的标记。这些标记看起来像这样:</p><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
your changes
=======
changes on the branch you are merging
&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch_name</code> 之间的部分是在当前分支 (HEAD) 上做的更改，而 <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch_name</code> 之间的部分是在待合并分支上做的更改。</p><p>要解决冲突，需要决定应该保留哪些更改，也可能需要将两个版本的更改合并在一起。完成后，需要删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 、 <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch_name</code> 这三个标记。然后，将解决冲突后的文件添加到暂存区，并进行提交:</p><div class="language-terminal line-numbers-mode" data-ext="terminal"><pre class="language-terminal"><code>git add conflicted_file
git commit -m &quot;Resolved merge conflict&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就成功解决了合并时出现的冲突，并将解决冲突后的文件提交到了版本库。</p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><p>远程仓库是 Git 的另一个重要概念。它们是存储在网络上的项目的版本库，可以让多个人共享和协作。下面将详细介绍远程仓库的相关操作。</p><h3 id="什么是远程仓库" tabindex="-1"><a class="header-anchor" href="#什么是远程仓库" aria-hidden="true">#</a> 什么是远程仓库？</h3><p>远程仓库通常是指托管在网络上的项目的 Git 仓库，常常用于多人协作项目。这些仓库可以在许多地方托管，比如 GitHub、GitLab 或 Bitbucket。</p><h3 id="添加远程仓库" tabindex="-1"><a class="header-anchor" href="#添加远程仓库" aria-hidden="true">#</a> 添加远程仓库</h3><p>要将项目与远程仓库关联，可以使用 <code>git remote add</code> 命令，后面加上远程仓库的名称 (通常为&quot;origin&quot;) 和远程仓库的URL:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git remote add origin https://example.git
</code></pre></div><h3 id="克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆远程仓库" aria-hidden="true">#</a> 克隆远程仓库</h3><p>要在本地创建一个远程仓库的副本，可以使用 <code>git clone</code> 命令，后面加上远程仓库的URL:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git clone https://example.git
</code></pre></div><p>这个命令会在当前目录下创建一个与远程仓库同名的新目录，并下载远程仓库的所有文件和历史记录。</p><h3 id="推送本地仓库到远程" tabindex="-1"><a class="header-anchor" href="#推送本地仓库到远程" aria-hidden="true">#</a> 推送本地仓库到远程</h3><p>在本地完成更改并提交后，可以将这些更改推送到远程仓库以分享工作。这可以通过 <code>git push</code> 命令实现，后面加上远程仓库的名称 (通常为 &quot;origin&quot;) 和待推送的分支名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git push origin master
</code></pre></div><p>此命令会将 master 分支的更改推送到名为 origin 的远程仓库。</p><h3 id="从远程仓库拉取更新" tabindex="-1"><a class="header-anchor" href="#从远程仓库拉取更新" aria-hidden="true">#</a> 从远程仓库拉取更新</h3><p>如果远程仓库有新的更改，可以使用 <code>git pull</code> 命令获取这些更改，后面加上远程仓库的名称和待拉取的分支名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git pull origin master
</code></pre></div><h3 id="远程仓库分支管理" tabindex="-1"><a class="header-anchor" href="#远程仓库分支管理" aria-hidden="true">#</a> 远程仓库分支管理</h3><p>在远程仓库中，可以管理分支，就如同在本地一样。例如，推送新分支到远程仓库:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git push origin new_branch
</code></pre></div><p>也可以从远程仓库拉取分支到本地:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git checkout -b new_branch origin/new_branch
</code></pre></div><p>如果需要删除远程仓库的某个分支，可以使用 <code>git push</code> 命令，后面加上分支名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git push origin :old_branch
</code></pre></div><h2 id="git-标签" tabindex="-1"><a class="header-anchor" href="#git-标签" aria-hidden="true">#</a> Git 标签</h2><p>Git 标签是指向特定 <code>commit</code> 的引用，常用于标记项目的重要点，如版本迭代和版本发布。</p><h3 id="创建标签" tabindex="-1"><a class="header-anchor" href="#创建标签" aria-hidden="true">#</a> 创建标签</h3><p>在 Git 中，有两种类型的标签: 轻量标签 (lightweight) 和附注标签 (annotated)。</p><p>轻量标签非常类似于一个不会改变的分支，因为它只是一个指向 <code>commit</code> 的引用。创建轻量标签，不需要使用任何选项:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git tag v1.0
</code></pre></div><p>附注标签是存储在 Git 数据库中的一个完整对象，它包含了标签制作者的名字、电子邮件地址、日期时间，还有一个可以解释标签背后意义的消息。创建附注标签，可以使用 <code>-a</code> 选项:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git tag -a v1.0 -m &quot;version 1.0&quot;
</code></pre></div><h3 id="查看标签" tabindex="-1"><a class="header-anchor" href="#查看标签" aria-hidden="true">#</a> 查看标签</h3><p>要查看所有的标签，可以使用 <code>git tag</code> 命令:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git tag
</code></pre></div><h3 id="检出标签" tabindex="-1"><a class="header-anchor" href="#检出标签" aria-hidden="true">#</a> 检出标签</h3><p>在 Git 中，&quot;检出&quot; (checkout) 通常指的是切换到某个分支或者某个提交。然而，对于标签，Git 不允许直接检出，因为标签只是一个不可变的快照，不应该进行任何更改。</p><p>不过，如果有需求需要基于某个标签进行工作，可以创建一个新的分支，该分支从标签所指向的 <code>commit</code> 开始。这可以通过如下命令完成：</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git checkout -b branchname tagname
</code></pre></div><p>其中，<code>branchname</code> 是新分支的名字，<code>tagname</code> 是要基于的标签的名字。这个命令会创建一个新的分支并立即切换到新分支，新分支的起点是 <code>tagname</code> 标签所指向的 <code>commit</code>。在这个新分支上的任何更改都不会影响标签所指向的 <code>commit</code>。</p><h3 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h3><p>如果需要删除一个标签，可以使用 <code>git tag -d</code> 命令，后面加上标签名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git tag -d v1.0
</code></pre></div><h3 id="推送标签到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送标签到远程仓库" aria-hidden="true">#</a> 推送标签到远程仓库</h3><p>创建的标签默认不会被推送到远程仓库，需要显式地推送。推送一个标签到远程仓库，可以使用 <code>git push origin</code> 命令，后面加上标签名称:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git push origin v1.0
</code></pre></div><p>如果需要推送所有的标签到远程仓库，可以使用 <code>--tags</code> 选项:</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>git push origin --tags
</code></pre></div>`,144);function f(_,G){const n=d("ExternalLinkIcon");return l(),r("div",null,[h,e("ol",null,[e("li",null,[a("进入 "),e("a",m,[a("Git 官网下载"),c(n)])]),p,v,b]),x])}const k=t(u,[["render",f],["__file","git.html.vue"]]);export{k as default};
